CREATE TABLE Student (
    stdNo CHAR(8) PRIMARY KEY,
    Name varchar2(20) NOT NULL,
    Birth DATE NOT NULL,
    Major VARCHAR2(20),
    ENR_DATE DATE NOT NULL
);

CREATE TABLE Course (
    CS_ID NUMBER(4) PRIMARY KEY,
    CS_NAME VARCHAR2(40) NOT NULL,
    CS_Credit NUMBER(1) NOT NULL,
    CS_DEPT VARCHAR2(20) NOT NULL
);

CREATE TABLE Enrollment (
    ENR_NO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ENR_STDNO CHAR(8) NOT NULL,
    ENR_CSID NUMBER(4),
    MID_SCORE NUMBER,
    FINAL_SCORE NUMBER,
    TOTAL_SCORE NUMBER,
    GRADE CHAR(1)
);

INSERT INTO STUDENT VALUES ('20121016', '김유신', '1991-01-13', '국문학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20111126', '김춘추', '1992-04-11', '경제학과', '2011-02-01');
INSERT INTO STUDENT VALUES ('20100216', '장보고', '1991-05-23', '컴퓨터학과', '2010-02-01');
INSERT INTO STUDENT VALUES ('20120326', '강감찬', '1991-02-09', '영문학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20130416', '이순신', '1992-11-30', '경영학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20110521', '송상현', '1992-07-17', '컴퓨터학과', '2011-02-01');

INSERT INTO COURSE VALUES ('1059', '고전문학', '3', '국문학과');
INSERT INTO COURSE VALUES ('2312', '데이터베이스', '3', '컴퓨터학과');
INSERT INTO COURSE VALUES ('1203', 'Easy Writing', '3', '영문학과');
INSERT INTO COURSE VALUES ('2039', '글로벌경제학', '3', '경제학과');
INSERT INTO COURSE VALUES ('2301', '프로그래밍언어', '3', '컴퓨터학과');
INSERT INTO COURSE VALUES ('2303', '컴퓨터과학 개론', '2', '컴퓨터학과');
INSERT INTO COURSE VALUES ('3012', '마케팅 전략', '2', '경영학과');

INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20111126', 1203);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', 2301);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', 2303);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20111126', 2039);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20100216', 3012);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20120326', 3012);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', 2312);
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20130416', 3012);

SELECT * FROM STUDENT WHERE MAJOR = '컴퓨터학과';

SELECT * FROM COURSE WHERE CS_DEPT = '컴퓨터학과';

SELECT * FROM ENROLLMENT WHERE ENR_STDNO = '20121016';

SELECT NAME, MAJOR, ENR_DATE FROM STUDENT WHERE MAJOR = '국문학과';

SELECT * FROM course WHERE CS_DEPT = '컴퓨터학과' AND CS_CREDIT = '2';

SELECT STDNO, NAME, BIRTH FROM STUDENT WHERE BIRTH > '1992-01-01';

UPDATE ENROLLMENT SET MID_SCORE = 36, FINAL_SCORE = 42 WHERE ENR_STDNO = '20111126' AND ENR_CSID = 1203;
UPDATE ENROLLMENT SET MID_SCORE = 24, FINAL_SCORE = 62 WHERE ENR_STDNO = '20121016' AND ENR_CSID = 2301;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE = 40 WHERE ENR_STDNO = '20121016' AND ENR_CSID = 2303;
UPDATE ENROLLMENT SET MID_SCORE = 37, FINAL_SCORE = 57 WHERE ENR_STDNO = '20111126' AND ENR_CSID = 2039;
UPDATE ENROLLMENT SET MID_SCORE = 28, FINAL_SCORE = 68 WHERE ENR_STDNO = '20100216' AND ENR_CSID = 3012;
UPDATE ENROLLMENT SET MID_SCORE = 16, FINAL_SCORE = 65 WHERE ENR_STDNO = '20120326' AND ENR_CSID = 3012;
UPDATE ENROLLMENT SET MID_SCORE = 18, FINAL_SCORE = 38 WHERE ENR_STDNO = '20121016' AND ENR_CSID = 2312;
UPDATE ENROLLMENT SET MID_SCORE = 25, FINAL_SCORE = 58 WHERE ENR_STDNO = '20130416' AND ENR_CSID = 3012;

-- 실습 2-11
UPDATE enrollment 
    SET TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
    GRADE = CASE
    WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
    WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
    WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
    WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
    ELSE 'F'
END;

SELECT * FROM ENROLLMENT;

-- 실습 2-12
SELECT * FROM ENROLLMENT ORDER BY TOTAL_SCORE DESC;

-- 실습 2-13
SELECT * FROM ENROLLMENT 
    WHERE ENR_CSID = '3012'
    ORDER BY TOTAL_SCORE DESC;
    
-- 실습 2-14
SELECT CS_ID, CS_NAME FROM COURSE
    WHERE CS_NAME = '데이터베이스' OR cs_name = '프로그래밍언어';
    
-- 실습 2-15
SELECT CS_NAME, CS_DEPT FROM COURSE;

-- 실습 2-16
SELECT STDNO, NAME FROM STUDENT ORDER BY NAME ASC;

-- 실습 2-17
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;

-- 실습 2-18
SELECT MAX(TOTAL_SCORE) AS "가장_큰_총점" FROM ENROLLMENT;

-- 실습 2-19
select major, count(stdno) as 학생수 from student Group by major;

-- 실습 2-20
select enr_csid, count(distinct enr_stdno) as 수강_학생수 
    from enrollment 
    group by enr_csid 
    having count(enr_stdno) >= 2;

-- 실습 2-21
select
    stdno,
    name,
    major,
    enr_csid,
    mid_score,
    final_score,
    total_score,
    grade
from Student S
join enrollment E
on s.stdno = e.enr_stdno;

-- 실습 2-22
select name, stdNo, enr_csid
from student s
join enrollment e
on s.stdno = e.enr_stdno
where enr_csid = '3012';

-- 실습 2-23
select 
    stdNo,
    Name,
    count(stdNo) As 수강신청 건수,
    sum(regTotalScore) as 종합점수,
    sum(regTotalScore) / count(stdNo) as 평균
from Student S
Join Enrollment E on S.stdNo = E.enr_stdno
